<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RBAC on My New Hugo Site！！！</title>
    <link>http://localhost:1313/tags/rbac/</link>
    <description>Recent content in RBAC on My New Hugo Site！！！</description>
    <generator>Hugo</generator>
    <language>zh-TW</language>
    <lastBuildDate>Mon, 13 Dec 2021 14:35:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/rbac/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「Spring Security」前后端分离后台菜单权限控制</title>
      <link>http://localhost:1313/posts/spring-security-rbac/</link>
      <pubDate>Mon, 13 Dec 2021 14:35:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/spring-security-rbac/</guid>
      <description>1. RBAC权限控制模型 RBAC（Role-based access control）是一种以角色为基础的访问控制（Role-based access control，RBAC），它是一种较新且广为使用的权限控制机制，这种机制不是直接给用户赋予权限，而是将权限赋予角色。&#xA;RBAC 权限模型将用户按角色进行归类，通过用户的角色来确定用户对某项资源是否具备操作权限。RBAC 简化了用户与权限的管理，它将用户与角色关联、角色与权限关联、权限与资源关联，这种模式使得用户的授权管理变得非常简单和易于维护。&#xA;2. 数据库设计 -- 用户表 DROP TABLE IF EXISTS `sys_user`; CREATE TABLE `sys_user` ( `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT &amp;#39;用户ID&amp;#39;, `username` VARCHAR(255) DEFAULT NULL COMMENT &amp;#39;用户名&amp;#39;, `password` VARCHAR(255) DEFAULT NULL COMMENT &amp;#39;密码&amp;#39;, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&amp;#39;用户表&amp;#39;; -- 角色表 DROP TABLE IF EXISTS `sys_role`; CREATE TABLE `sys_role` ( `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT &amp;#39;角色ID&amp;#39;, `role_name` VARCHAR(50) DEFAULT NULL COMMENT &amp;#39;角色名称&amp;#39;, `role_desc` VARCHAR(255) DEFAULT NULL COMMENT &amp;#39;描述&amp;#39;, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&amp;#39;角色表&amp;#39;; -- 菜单表 DROP TABLE IF EXISTS `sys_menu`; CREATE TABLE `sys_menu` ( `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT &amp;#39;菜单ID&amp;#39;, `menu_name` VARCHAR(100) DEFAULT NULL COMMENT &amp;#39;菜单名称&amp;#39;, `menu_path` VARCHAR(255) DEFAULT NULL COMMENT &amp;#39;菜单路径&amp;#39;, `menu_type` char DEFAULT NULL COMMENT &amp;#39;菜单类型(1:一级菜单，2:子菜单，3:按钮)&amp;#39;, `menu_parent_id` BIGINT DEFAULT NULL COMMENT &amp;#39;父级菜单Id&amp;#39;, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&amp;#39;菜单表&amp;#39;; -- 用户&amp;amp;角色 关联表 DROP TABLE IF EXISTS `sys_role_user`; CREATE TABLE `sys_role_user` ( `id` BIGINT NOT NULL AUTO_INCREMENT, `role_id` BIGINT DEFAULT NULL COMMENT &amp;#39;角色ID&amp;#39;, `user_id` BIGINT DEFAULT NULL COMMENT &amp;#39;用户ID&amp;#39;, PRIMARY KEY (`id`) ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COMMENT=&amp;#39;系统用户角色关联表&amp;#39;; -- 菜单&amp;amp;角色 关联表 DROP TABLE IF EXISTS `sys_role_menu`; CREATE TABLE `sys_role_menu` ( `id` BIGINT NOT NULL AUTO_INCREMENT, `role_id` BIGINT DEFAULT NULL COMMENT &amp;#39;角色ID&amp;#39;, `menu_id` BIGINT DEFAULT NULL COMMENT &amp;#39;菜单ID&amp;#39;, PRIMARY KEY (`id`) ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COMMENT=&amp;#39;系统角色菜单关联表&amp;#39;; -- 初始数据： -- 管理员拥有所有菜单权限 -- 普通用户拥有查看权限 INSERT INTO `sys_role`(`id`, `role_name`, `role_desc`) VALUES (1, &amp;#39;admin&amp;#39;, &amp;#39;管理员&amp;#39;),(2, &amp;#39;user&amp;#39;, &amp;#39;普通用户&amp;#39;); INSERT INTO `sys_menu`(`id`, `menu_name`,`menu_path`,`menu_type`,`menu_parent_id`) VALUES (1, &amp;#39;用户管理&amp;#39;, &amp;#39;/user&amp;#39;, 1, null), (2, &amp;#39;用户列表&amp;#39;, &amp;#39;/user/list&amp;#39;, 2, 1), (3, &amp;#39;新增用户&amp;#39;, &amp;#39;/user/add&amp;#39;, 2, 1), (4, &amp;#39;修改用户&amp;#39;, &amp;#39;/user/update&amp;#39;, 2, 1), (5, &amp;#39;删除用户&amp;#39;, &amp;#39;/user/delete&amp;#39;, 3, 1); INSERT INTO `sys_role_user`(`user_id`, `role_id`) VALUES (1, 1); INSERT INTO `sys_role_menu`(`role_id`, `menu_id`) VALUES (1, 1),(1, 2),(1, 3),(1, 4),(1, 5), (2, 1),(2, 2); 3.</description>
    </item>
  </channel>
</rss>
