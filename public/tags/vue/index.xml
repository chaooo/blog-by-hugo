<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue on My New Hugo Site！！！</title>
    <link>http://localhost:1313/tags/vue/</link>
    <description>Recent content in Vue on My New Hugo Site！！！</description>
    <generator>Hugo</generator>
    <language>zh-TW</language>
    <lastBuildDate>Mon, 27 Dec 2021 17:35:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「Spring Security」前后端分离菜单权限控制-前端动态路由</title>
      <link>http://localhost:1313/posts/spring-security-vue/</link>
      <pubDate>Mon, 27 Dec 2021 17:35:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/spring-security-vue/</guid>
      <description>前端部分，这里基于vue-element-admin模板来演示， vue-element-admin是一个后台前端解决方案，它基于vue和element-ui实现。&#xA;1. 安装 vue-element-admin # 克隆项目 git clone https://github.com/PanJiaChen/vue-element-admin.git # 进入项目目录 cd vue-element-admin # 安装依赖， 建议不要用 cnpm 安装 会有各种诡异的bug 可以通过如下操作解决 npm 下载速度慢的问题 npm install --registry=https://registry.npm.taobao.org # 本地开发 启动项目 npm run dev 2. 改造前端路由挂载方式 vue-element-admin中权限的实现方式是：通过获取当前用户的权限去比对路由表，生成当前用户具有的权限可访问的路由表，通过router.addRoutes动态挂载到router上。&#xA;这里改造得更灵活一点，后台根据用户计算出可访问得菜单列表，直接返回用户可访问得菜单列表，前端也需要保存一份全的路由表，用户登录后得到可访问菜单，匹配前端保存的路由表然后动态挂载。&#xA;用户登录成功之后，在全局钩子router.beforeEach中拦截路由，判断是否已获得token，在获得token之后我们就要去获取用户的基本信息及可访问菜单，然后动态挂载路由。&#xA;/** * src/permission.js */ // router.beforeEach const hasRoles = store.getters.roles &amp;amp;&amp;amp; store.getters.roles.length &amp;gt; 0 if (hasRoles) { next() } else { // get user info const { menus } = await store.dispatch(&amp;#39;user/getInfo&amp;#39;) // generate accessible routes map based on menus const accessRoutes = await store.</description>
    </item>
  </channel>
</rss>
